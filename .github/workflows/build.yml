name: Code Quality & Tests

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"

jobs:
  python-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v2
        with:
          enable-cache: true

      - name: Install Python dependencies
        run: |
          uv sync --all-groups

      - name: Run Ruff linting
        run: |
          uv run ruff check .

      - name: Run Ruff formatting check
        run: |
          uv run ruff format --check .

      - name: Run type checking with mypy
        run: |
          uv run mypy backend/src tests --ignore-missing-imports
        continue-on-error: true

      - name: Run Python tests
        run: |
          uv run pytest tests/ -v --tb=short
        env:
          JWT_SECRET: "test-jwt-secret-key-for-development-only"
          ENV: "test"

  frontend-quality:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript type check
        run: npm run type-check

      - name: Build frontend
        run: npm run build

  mcp-servers:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        server: [Python, TypeScript, Rust]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python (for Python MCP server)
        if: matrix.server == 'Python'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv (for Python MCP server)
        if: matrix.server == 'Python'
        uses: astral-sh/setup-uv@v2

      - name: Test Python MCP server
        if: matrix.server == 'Python'
        working-directory: ./mcp/server/ToolRack/Python
        run: |
          uv sync
          uv run pytest tests/ -v

      - name: Set up Node.js (for TypeScript MCP server)
        if: matrix.server == 'TypeScript'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Test TypeScript MCP server
        if: matrix.server == 'TypeScript'
        working-directory: ./mcp/server/ToolRack/TypeScript
        run: |
          npm ci
          npm run build

      - name: Set up Rust (for Rust MCP server)
        if: matrix.server == 'Rust'
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Test Rust MCP server
        if: matrix.server == 'Rust'
        working-directory: ./mcp/server/ToolRack/Rust
        run: |
          cargo test
          cargo build --release

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Bandit security linter
        uses: tj-actions/bandit@v5.1
        with:
          options: "-r backend/src -f json -o bandit-report.json"
        continue-on-error: true

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results
          path: bandit-report.json
          retention-days: 7

  code-coverage:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v2

      - name: Install dependencies with coverage tools
        run: |
          uv sync --all-groups
          uv add pytest-cov

      - name: Run tests with coverage
        run: |
          uv run pytest tests/ --cov=backend/src --cov-report=xml --cov-report=html
        env:
          JWT_SECRET: "test-jwt-secret-key-for-development-only"
          ENV: "test"

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
        continue-on-error: true

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            coverage.xml
            htmlcov/
          retention-days: 7
